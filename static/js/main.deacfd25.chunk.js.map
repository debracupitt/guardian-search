{"version":3,"sources":["hoc/Aux/Aux.js","components/Header/Header.js","hoc/Layout/Layout.js","components/Results/Article/Article.js","components/SavedDrawer/SavedDrawer.js","components/SavedDrawer/SavedArticle/SavedArticle.js","components/Results/Results.js","containers/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","Header","react_default","a","createElement","className","Layout","Aux","components_Header_Header","classes","Content","this","Component","article","href","url","title","date","onClick","clicked","SavedDrawer","drawerToggle","savedArticles","savedArticle","id","Results","state","results","savedResults","reformatDate","dateArray","split","reformattedDateArray","push","join","checkSavedMatch","array","articleId","i","length","saveHandler","articleTitle","articleDate","articleUrl","undefined","_this","find","updatedSaved","concat","Object","toConsumableArray","webTitle","webPublicationDate","webUrl","setState","deleteHandler","event","indexToDelete","target","parentNode","savedCopy","splice","articles","_this2","sections","formattedSections","map","section","matchingArticles","sectionName","Article_Article","key","SavedArticle_SavedArticle","e","components_SavedDrawer_SavedDrawer","Search","searchInput","error","handleChange","axios","get","value","then","response","sectionsSet","Set","data","forEach","result","add","catch","responseResults","components_Results_Results","type","placeholder","autoFocus","onChange","App","hoc_Layout_Layout","containers_Search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.deacfd25.chunk.js","sourcesContent":["const aux = props => props.children;\n\nexport default aux;\n","import React from \"react\";\n\nimport \"./Header.css\";\n\nfunction Header(props) {\n  return (\n    <header className=\"header\">\n      <h1>The Guardian Lookup</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nimport Aux from \"../Aux/Aux\";\nimport classes from \"./Layout.css\";\nimport Header from \"../../components/Header/Header\";\n\nclass Layout extends Component {\n  render() {\n    return (\n      <Aux>\n        <Header />\n        <main className={classes.Content}>{this.props.children}</main>\n      </Aux>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\n\nimport \"./Article.css\";\n\nconst article = props => (\n  <div className=\"Article\" href={props.url}>\n    <div>\n      <p className=\"title\">{props.title}</p>\n    </div>\n    <div>\n      <p className=\"date\">{props.date}</p>\n      <a className=\"link\" href={props.url}>\n        READ MORE\n      </a>\n      <p onClick={props.clicked} className=\"save\" title=\"Save Article\">\n        SAVE\n      </p>\n    </div>\n  </div>\n);\n\nexport default article;\n","import React, { Component } from \"react\";\n\nimport \"./SavedDrawer.css\";\n\nclass SavedDrawer extends Component {\n  // Saved articles in a show/hide drawer\n  // state = {\n  //   drawerVisibile: false\n  // }\n  //\n  // drawerToggle = () => {\n  //\n  // };\n\n  render() {\n    return (\n      <div>\n        <section\n          className=\"SavedSection drawer-closed\"\n          onClick={this.drawerToggle}\n        >\n          <h2>Your Saved Articles</h2>\n          <div className=\"saved-articles\">{this.props.savedArticles}</div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default SavedDrawer;\n","import React from \"react\";\n\nimport \"./SavedArticle.css\";\n\nconst savedArticle = props => (\n  <div className=\"SavedArticle\" href={props.url} id={props.id}>\n    <div>\n      <p className=\"title\">{props.title}</p>\n    </div>\n    <div>\n      <p className=\"date\">{props.date}</p>\n      <a className=\"savedLink\" href={props.url}>\n        READ MORE\n      </a>\n      <p onClick={props.clicked} className=\"delete\" title=\"Delete Article\">\n        DELETE\n      </p>\n    </div>\n  </div>\n);\n\nexport default savedArticle;\n","import React, { Component } from \"react\";\n\nimport Article from \"./Article/Article\";\nimport \"./Results.css\";\nimport SavedDrawer from \"../SavedDrawer/SavedDrawer\";\nimport SavedArticle from \"../SavedDrawer/SavedArticle/SavedArticle\";\n\nclass Results extends Component {\n  state = {\n    results: [],\n    savedResults: []\n  };\n\n  componentDidMount() {\n    this.setState({ results: this.props.articles });\n  }\n\n  // format date data to DD/MM/YYYY\n  reformatDate = date => {\n    const dateArray = date.split(\"T\")[0].split(\"-\");\n    let reformattedDateArray = [];\n\n    reformattedDateArray.push(dateArray[2]);\n    reformattedDateArray.push(dateArray[1]);\n    reformattedDateArray.push(dateArray[0]);\n\n    const finalDate = reformattedDateArray.join(\"/\");\n    return finalDate;\n  };\n\n  // Check currently saved articles for match with new saved article to prevent duplication\n  checkSavedMatch = (array, articleId) => {\n    for (let i = 0; i < array.length + 1; i++) {\n      if (array[i].id === articleId) {\n        return i;\n      }\n    }\n  };\n\n  // Save articles to array stored in state\n  saveHandler = (articleId, articleTitle, articleDate, articleUrl) => {\n    // Check currently saved articles for match with new saved article to prevent duplication\n    const articleSaved = this.state.savedResults.find(\n      article => article.id === articleId\n    );\n\n    // If no match, store to saved on state object\n    if (articleSaved === undefined) {\n      const updatedSaved = [\n        ...this.state.savedResults,\n        {\n          id: articleId,\n          webTitle: articleTitle,\n          webPublicationDate: articleDate,\n          webUrl: articleUrl\n        }\n      ];\n      this.setState({ savedResults: updatedSaved });\n    }\n  };\n\n  // Delete article card\n  deleteHandler = event => {\n    // Find the index of the saved article in the savedResults state array\n    const indexToDelete = this.checkSavedMatch(\n      this.state.savedResults,\n      event.target.parentNode.parentNode.id\n    );\n    // Create a copy of savedResults array to delete article from\n    const savedCopy = [...this.state.savedResults];\n    // Delete article from array copy\n    savedCopy.splice(indexToDelete, 1);\n    // Update the state with new savedResults\n    this.setState({ savedResults: savedCopy });\n  };\n\n  render() {\n    const sections = [...this.props.sections];\n    let results = this.props.articles;\n\n    let formattedSections = sections.map(section => {\n      // Create list of articles that match the section name\n      let matchingArticles = results.map(a => {\n        if (a.sectionName === section) {\n          return (\n            <Article\n              key={a.id}\n              title={a.webTitle}\n              date={this.reformatDate(a.webPublicationDate)}\n              url={a.webUrl}\n              clicked={() =>\n                this.saveHandler(\n                  a.id,\n                  a.webTitle,\n                  this.reformatDate(a.webPublicationDate),\n                  a.webUrl\n                )\n              }\n            />\n          );\n        } else {\n          return \"\";\n        }\n      });\n\n      // Return JSX section name and articles that match that section\n      return (\n        <div className=\"section\" key={section}>\n          <h3>{section}</h3>\n          <div className=\"sectionArticles\">{matchingArticles}</div>\n        </div>\n      );\n    });\n\n    let savedResults = this.state.savedResults;\n    let savedArticles = savedResults.map(a => {\n      return (\n        <SavedArticle\n          className=\"saved\"\n          key={a.id}\n          id={a.id}\n          title={a.webTitle}\n          date={a.webPublicationDate}\n          url={a.webUrl}\n          clicked={e => this.deleteHandler(e)}\n        />\n      );\n    });\n\n    return (\n      <div className=\"results-container\">\n        <section className=\"Results\">{formattedSections}</section>\n        <SavedDrawer savedArticles={savedArticles} />\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./Search.css\";\nimport Results from \"../../components/Results/Results\";\nimport Aux from \"../../hoc/Aux/Aux\";\n\nclass Search extends Component {\n  state = {\n    searchInput: \"\",\n    articles: [],\n    sections: [],\n    error: false\n  };\n\n  handleChange = event => {\n    // Make API resuest as the user types\n    axios\n      .get(\n        \"https://content.guardianapis.com/search?q=\" +\n          event.target.value +\n          \"&api-key=27157d59-4928-405b-baff-081c8792db26\"\n      )\n      .then(response => {\n        const sectionsSet = new Set();\n        response.data.response.results.forEach(result =>\n          sectionsSet.add(result.sectionName)\n        );\n        this.setState({\n          articles: response.data.response.results,\n          sections: sectionsSet\n        });\n      })\n      .catch(error => {\n        this.setState({ error: true });\n      });\n    this.setState({ searchInput: event.target.value });\n  };\n\n  render() {\n    // If error, handle, if not render search results\n    let responseResults = this.state.error ? (\n      <h4> Sorry... looks like something has gone wrong</h4>\n    ) : (\n      <Results articles={this.state.articles} sections={this.state.sections} />\n    );\n\n    return (\n      <Aux>\n        <div className=\"search\">\n          <input\n            type=\"search\"\n            placeholder=\"What are you looking for?\"\n            title=\"Search\"\n            autoFocus=\"autofocus\"\n            className=\"searchInput\"\n            onChange={this.handleChange}\n          />\n        </div>\n        {responseResults}\n      </Aux>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\n\nimport Layout from \"./hoc/Layout/Layout\";\nimport Search from \"./containers/Search/Search\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <Search />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}